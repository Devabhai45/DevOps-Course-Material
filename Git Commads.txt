Here are some essential Git commands along with descriptions of what they do:

### Basic Commands

1. git init
   - Initializes a new Git repository in the current directory.

2. git clone <repository>
   - Copies an existing Git repository from a remote server to your local machine.

3. git status
   - Displays the state of the working directory and the staging area. Shows which changes have been staged, which haven't, and which files are not being tracked by Git.

4. git add <file>
   - Adds a file to the staging area, preparing it for a commit.

5. git commit -m "<message>"
   - Records changes to the repository with a descriptive message.

6. git log
   - Shows the commit history for the repository.

### Branching and Merging

7. git branch
   - Lists all branches in the repository. The current branch is marked with an asterisk.

8. git branch <branch-name>
   - Creates a new branch.

9. git checkout <branch-name>
   - Switches to the specified branch.

10. git checkout -b <branch-name>
    - Creates a new branch and switches to it immediately.

11. git merge <branch-name>
    - Merges the specified branch into the current branch.

12. git branch -d <branch-name>
    - Deletes the specified branch.

### Remote Repositories

13. git remote add <name> <url>
    - Adds a new remote repository with a specified name and URL.

14. git remote -v
    - Lists all remote repositories associated with the local repository.

15. git push <remote> <branch>
    - Pushes commits from the local branch to the remote repository.

16. git pull <remote> <branch>
    - Fetches and integrates changes from the remote branch to the local branch.

### Viewing Changes

17. git diff
    - Shows changes between the working directory and the staging area.

18. git diff --staged
    - Shows changes between the staging area and the last commit(Local repository).

19. git diff --staged head
    - Shows changes between the working directory and the last commit(Local repository).


### Undoing Changes

19. git reset <file>
    - Removes a file from the staging area but keeps its changes in the working directory.

20. git reset --hard <commit>
    - Resets the working directory and staging area to match the specified commit. **Warning: This command will discard all changes in the working directory.**

21. git revert <commit>
    - Creates a new commit that undoes the changes made in the specified commit.

### Stashing

22. git stash
    - Temporarily saves changes in the working directory that are not ready to be committed. This allows you to clean the working directory without committing.

23. git stash apply
    - Applies the stashed changes to the working directory.

24. git stash pop
    - Applies the stashed changes to the working directory and removes the stash from the list of stashes.

### Tagging

25. git tag <tag-name>
    - Creates a new tag, which is a reference to a specific commit.

26. git tag
    - Lists all tags in the repository.

### Configuration

27. git config --global user.name "<name>"
    - Sets the global username for commits.

28. git config --global user.email "<email>"
    - Sets the global email address for commits.

29. git config --list
    - Lists all the configuration settings.

### Miscellaneous

30. git show <commit>
    - Displays detailed information about the specified commit.

31. git rm <file>
    - Removes a file from the working directory and stages the deletion.

32. git mv <old-name> <new-name>
    - Renames a file and stages the change.

### Creating and Managing Repositories

33. git remote rename <old-name> <new-name>
    - Renames a remote repository.

34. git remote remove <name>
    - Removes a remote repository.

35. git fetch <remote>
    - Downloads objects and refs from another repository.

By mastering these commands, you'll be well-equipped to handle most Git workflows and manage your codebase effectively.